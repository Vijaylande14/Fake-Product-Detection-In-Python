{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "389bf3d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import sqlite3\n",
    "import bcrypt\n",
    "\n",
    "# Database connection\n",
    "conn = sqlite3.connect('user.db')\n",
    "cur = conn.cursor()\n",
    "\n",
    "# Check if table exists, create if not\n",
    "cur.execute(\n",
    "    '''CREATE TABLE IF NOT EXISTS users (username TEXT PRIMARY KEY, email TEXT, mobilenumber TEXT, password TEXT)''')\n",
    "conn.commit()\n",
    "\n",
    "st.title(\"Fake Product Review Detection\")\n",
    "st.markdown(f\"<style>body {{background-color: black;}}</style>\", unsafe_allow_html=True)  # Set background color to black\n",
    "   \n",
    "def registration_page():\n",
    "    \"\"\" Creates registration form and handles user data \"\"\"\n",
    "    st.title(\"Registration\")\n",
    "    st.markdown(f\"<style>body {{background-color: black;}}</style>\", unsafe_allow_html=True)  # Set background color to black\n",
    "   \n",
    "    \n",
    "    username = st.text_input(\"Username\")\n",
    "    email = st.text_input(\"Email\")\n",
    "    mobilenumber = st.text_input(\"Mobile Number\")\n",
    "    password = st.text_input(\"Password\", type=\"password\")\n",
    "    confirm_password = st.text_input(\"Confirm Password\", type=\"password\")\n",
    "    \n",
    "    # Submit button\n",
    "    if st.button(\"Submit\"):\n",
    "        \n",
    "        # Basic validation\n",
    "        if any(not field for field in [username, email, mobilenumber, password, confirm_password]):\n",
    "            st.error(\"Please fill all fields!\")\n",
    "            return\n",
    "\n",
    "        if password != confirm_password:\n",
    "            st.error(\"Passwords do not match!\")\n",
    "            return\n",
    "\n",
    "        # Hash password (secure hashing with bcrypt)\n",
    "        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n",
    "\n",
    "        # Insert user data and check rowcount for successful insertion\n",
    "        cur.execute(\"INSERT INTO users VALUES (?, ?, ?, ?)\", (username, email, mobilenumber, hashed_password))\n",
    "        if cur.rowcount > 0:\n",
    "            conn.commit()\n",
    "            st.success(\"Registration successful!\")\n",
    "        else:\n",
    "            st.error(\"Registration failed!\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def login_page():\n",
    "    \"\"\" Creates login form and handles authentication \"\"\"\n",
    "    st.title(\"Login\")\n",
    "    st.markdown(f\"<style>body {{background-color: black;}}</style>\", unsafe_allow_html=True)  # Set background color to black\n",
    "\n",
    "    username = st.text_input(\"Username\")\n",
    "    password = st.text_input(\"Password\", type=\"password\")\n",
    "    \n",
    "    # Submit button\n",
    "    if st.button(\"Submit\"):\n",
    "        \n",
    "        # Validate user and password (use secure hashing comparison)\n",
    "        cur.execute(\"SELECT * FROM users WHERE username = ?\", (username,))\n",
    "        user = cur.fetchone()\n",
    "        if user and bcrypt.checkpw(password.encode('utf-8'), user[3]):\n",
    "            st.success(\"Login successful!\")\n",
    "            # Call another Streamlit app here\n",
    "            st.write(\"Redirecting to another app...\")\n",
    "\n",
    "            import subprocess\n",
    "            subprocess.Popen(['streamlit', 'run', '.py'])  # Assuming 'main.py' is your other app\n",
    "            st.stop()  # Stop rendering current app\n",
    "\n",
    "\n",
    "        else:\n",
    "            st.error(\"Invalid username or password.\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Hide the sidebar (vertical navbar)\n",
    "st.sidebar.visible = False\n",
    "\n",
    "page = st.selectbox(\"Select Page\", [\"Registration\", \"Login\"])  # Moved to main area for better visibility\n",
    "\n",
    "if page == \"Registration\":\n",
    "    registration_page()\n",
    "elif page == \"Login\":\n",
    "    login_page()\n",
    "\n",
    "conn.close()\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
